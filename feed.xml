<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://amolrv.github.io/</id><title>Amol</title><subtitle>Stories, lessons and notes</subtitle> <updated>2023-09-07T13:55:37+05:30</updated> <author> <name>Amol Vyawhare</name> <uri>https://amolrv.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://amolrv.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://amolrv.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Amol Vyawhare </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Harnessing power of multi-paradigm</title><link href="https://amolrv.github.io/posts/mpp/" rel="alternate" type="text/html" title="Harnessing power of multi-paradigm" /><published>2023-09-07T00:00:00+05:30</published> <updated>2023-09-07T00:00:00+05:30</updated> <id>https://amolrv.github.io/posts/mpp/</id> <content src="https://amolrv.github.io/posts/mpp/" /> <author> <name>Amol Vyawhare</name> </author> <category term="Programming" /> <summary> Harnessing power of multi-paradigm Modern languages such as fsharp, swift, rust and Kotlin supports multiple programming paradigms, allowing developers to leverage the strengths of different approaches. Rust: combines imperative, functional, and object-oriented paradigms. Swift: imperative, object-oriented programming paradigms and incorporates functional programming features. Kotlin: objec... </summary> </entry> <entry><title>Clear and honest code</title><link href="https://amolrv.github.io/posts/clear-and-honest/" rel="alternate" type="text/html" title="Clear and honest code" /><published>2023-08-12T00:00:00+05:30</published> <updated>2023-08-13T03:53:27+05:30</updated> <id>https://amolrv.github.io/posts/clear-and-honest/</id> <content src="https://amolrv.github.io/posts/clear-and-honest/" /> <author> <name>Amol Vyawhare</name> </author> <category term="Programming" /> <summary> When working with a huge code base, it’s common to forget how a specific code block (function, method, or class) is implemented. However, the IDE suggests using a signature. Sometimes calling a code block can come with unpleasant shocks. By creating honest and clear code blocks, this can be prevented. For example: // (account: Account, amount : BigDecimal) -&amp;gt; Account fun credit(account: Ac... </summary> </entry> <entry><title>Code that changes together, stays together</title><link href="https://amolrv.github.io/posts/code-that-stays-together/" rel="alternate" type="text/html" title="Code that changes together, stays together" /><published>2022-08-02T00:00:00+05:30</published> <updated>2023-08-13T02:40:08+05:30</updated> <id>https://amolrv.github.io/posts/code-that-stays-together/</id> <content src="https://amolrv.github.io/posts/code-that-stays-together/" /> <author> <name>Amol Vyawhare</name> </author> <category term="Programming" /> <summary> In traditional clean/layered/onion architecture code is organized in layers and so as the abstractions such as controllers, services, repositories. What I have seen most of people do is tried to organize code per layer by structuring code around those layer. For example - src - controllers - services - use case - entities - repositories In some projects, where I see team wanted to bu... </summary> </entry> <entry><title>Analogy with Lego</title><link href="https://amolrv.github.io/posts/analogy-with-lego/" rel="alternate" type="text/html" title="Analogy with Lego" /><published>2022-07-26T00:00:00+05:30</published> <updated>2023-08-13T02:40:08+05:30</updated> <id>https://amolrv.github.io/posts/analogy-with-lego/</id> <content src="https://amolrv.github.io/posts/analogy-with-lego/" /> <author> <name>Amol Vyawhare</name> </author> <category term="Programming" /> <summary> The more I think about programming, the more I see lego. There is reason to that. I usually try to break down things to atomic levels from which it can’t be broken down into small things. In my childhood I used to do same with toy, pull out each piece and then put it back. So when I apply same things for programming, 2 things happens I creates lot of small pieces that can’t be broken down ... </summary> </entry> <entry><title>Atomic karma</title><link href="https://amolrv.github.io/posts/atomic-karma/" rel="alternate" type="text/html" title="Atomic karma" /><published>2022-06-16T00:00:00+05:30</published> <updated>2022-06-16T00:00:00+05:30</updated> <id>https://amolrv.github.io/posts/atomic-karma/</id> <content src="https://amolrv.github.io/posts/atomic-karma/" /> <author> <name>Amol Vyawhare</name> </author> <category term="Stories" /> <summary> Recently, I’m on Quest of finding fractal patterns in behavior. As part of this journey, I realized that Every action that I perform either consciously or unconsciously transform me on at least one dimension. For example, when I watch news, I have more knowledge and information but on other hand I have taken out attention. Such simple action affects me on those 2 dimensions. I do so many... </summary> </entry> </feed>
